/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PfxAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface PfxAmbulanceWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface PfxAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
}
export interface PfxAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPfxAmbulanceWlEditorElement;
}
export interface PfxAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPfxAmbulanceWlListElement;
}
declare global {
    interface HTMLPfxAmbulanceWlAppElement extends Components.PfxAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLPfxAmbulanceWlAppElement: {
        prototype: HTMLPfxAmbulanceWlAppElement;
        new (): HTMLPfxAmbulanceWlAppElement;
    };
    interface HTMLPfxAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLPfxAmbulanceWlEditorElement extends Components.PfxAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPfxAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLPfxAmbulanceWlEditorElement, ev: PfxAmbulanceWlEditorCustomEvent<HTMLPfxAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPfxAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLPfxAmbulanceWlEditorElement, ev: PfxAmbulanceWlEditorCustomEvent<HTMLPfxAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPfxAmbulanceWlEditorElement: {
        prototype: HTMLPfxAmbulanceWlEditorElement;
        new (): HTMLPfxAmbulanceWlEditorElement;
    };
    interface HTMLPfxAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLPfxAmbulanceWlListElement extends Components.PfxAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPfxAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLPfxAmbulanceWlListElement, ev: PfxAmbulanceWlListCustomEvent<HTMLPfxAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPfxAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLPfxAmbulanceWlListElement, ev: PfxAmbulanceWlListCustomEvent<HTMLPfxAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPfxAmbulanceWlListElement: {
        prototype: HTMLPfxAmbulanceWlListElement;
        new (): HTMLPfxAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "pfx-ambulance-wl-app": HTMLPfxAmbulanceWlAppElement;
        "pfx-ambulance-wl-editor": HTMLPfxAmbulanceWlEditorElement;
        "pfx-ambulance-wl-list": HTMLPfxAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface PfxAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface PfxAmbulanceWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: PfxAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface PfxAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: PfxAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "pfx-ambulance-wl-app": PfxAmbulanceWlApp;
        "pfx-ambulance-wl-editor": PfxAmbulanceWlEditor;
        "pfx-ambulance-wl-list": PfxAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pfx-ambulance-wl-app": LocalJSX.PfxAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLPfxAmbulanceWlAppElement>;
            "pfx-ambulance-wl-editor": LocalJSX.PfxAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLPfxAmbulanceWlEditorElement>;
            "pfx-ambulance-wl-list": LocalJSX.PfxAmbulanceWlList & JSXBase.HTMLAttributes<HTMLPfxAmbulanceWlListElement>;
        }
    }
}
